fus 2.0.6, radical

import "./manifest" all
ass: import "assert"

describe("compatibility", --
    it("setImmediate", done ->
        value: 1
        setImmediate <>
            ass.strictEqual(value, 2)
            done()
        value: 2
    )
    it("clearImmediate", done ->
        value: 1
        timer: setImmediate(<>
            value: 2
        )
        clearImmediate(timer)
        setTimeout(<>
            ass.strictEqual(value, 1)
            done()
        , 100)
    )
)

describe("loop", --
    it("array: number, diamond function", --
        r: []
        ret: loop(5, <> r.push(1))
        ass.deepStrictEqual(r, [1, 1, 1, 1, 1])
        ass.strictEqual(ret, void)
    )

    it("array: number, arrow function", --
        r: []
        loop(5, i -> r.push(i))
        ass.deepStrictEqual(r, [0, 1, 2, 3, 4])
    )

    it("object: by 2 with break", --
        r: []
        loop{1 by 2 for i ->
            r.push i
            if i > 9
                break
        }
        ass.deepStrictEqual(r, [1, 3, 5, 7, 9, 11])
    )

    it("array: number, arrow function with break", --
        r: []
        loop(10, i ->
            r.push(i)
            if i > 5
                break
        )
        ass.deepStrictEqual(r, [0, 1, 2, 3, 4, 5, 6])
    )

    it("object: canonical", --
        r: []
        loop{from: 1, to: 5, for: i ->
            r.push(i)
        }
        ass.deepStrictEqual(r, [1, 2, 3, 4, 5])
    )

    it("object: normal", --
        r: []
        loop{1 to 5 for i ->
            r.push(i)
        }
        ass.deepStrictEqual(r, [1, 2, 3, 4, 5])
    )

    it("object: by -1", --
        r: []
        loop{5 to 1 by -1 for i ->
            r.push(i)
        }
        ass.deepStrictEqual(r, [5, 4, 3, 2, 1])
    )

    it("function: with break", --
        r: []
        loop i ->
            r.push i
            if i > 3
                break
        ass.deepStrictEqual(r, [0, 1, 2, 3, 4])
    )
)

describe("repeat", --
    it("repeat", --
        ass.deepStrictEqual(repeat(5, i -> i + 2), [2, 3, 4, 5, 6])
        ass.deepStrictEqual(repeat(5), [0, 1, 2, 3, 4])
        ass.deepStrictEqual(repeat{1 to 10 by 2}, [1, 3, 5, 7, 9])
        ass.deepStrictEqual(repeat{1 by 2 for i -> i > 9 ? break else i}, [1, 3, 5, 7, 9])
    )
)

describe("enum", --
    it("enum", --
        ass.deepStrictEqual(enum{a}, {a: 0})
        ass.deepStrictEqual(enum{a, b}, {a: 0, b: 1})
    )
)

describe("compose", --
    it("multiple arguments", --
        a: compose(Math.min, Math.abs)
        ass.strictEqual(a(-2, -3), 3)
    )
    it("array argument", --
        a: compose[Math.min, Math.abs]
        ass.strictEqual(a(-2, -3), 3)
    )
)

describe("spread", --
    it("spread", --
        ass.deepStrictEqual(spread(0, 3), [0, 0, 0])
    )
)

describe("eventField", --
    it("eventField", --
        r: null
        Obj: class
            new: --
                me.onClick: eventField()
            makeClick: -- me.onClick.fire()
        obj: Obj()
        obj.onClick(--
            r: true
        )
        obj.makeClick()
        ass.strictEqual(r, true)
    )
)

describe("string", --
    it("bound", --
        ass.strictEqual(""..bound(), -1)
        ass.strictEqual("aaa"..bound(), 2)
    )
    it("format", --
        ass.strictEqual("a {0} b {1}"..format("qq", "r"), "a qq b r")
    )
    it("insert", --
        ass.strictEqual("aaa"..insert(1, "b"), "abaa")
    )
    it("remove", --
        ass.strictEqual("abcde"..remove(1, 2), "ade")
        ass.strictEqual("abcde"..remove(1), "acde")
    )
    it("matches", --
        matches: "aaa bbb"..matches(r"a")
        ass(matches is Array)
        ass.strictEqual(matches.length, 3)
        ass(matches.0 is Array)
        ass.strictEqual(matches.0.length, 1)
        ass.strictEqual(matches.0.0, "a")
        ass.strictEqual(matches.0.index, 0)
        ass(matches.1 is Array)
        ass.strictEqual(matches.1.length, 1)
        ass.strictEqual(matches.1.0, "a")
        ass.strictEqual(matches.1.index, 1)
        ass(matches.2 is Array)
        ass.strictEqual(matches.2.length, 1)
        ass.strictEqual(matches.2.0, "a")
        ass.strictEqual(matches.2.index, 2)
    )
    it("capitalize", --
        ass.strictEqual("abc"..capitalize(), "Abc")
    )
    it("split", --
        ass.deepStrictEqual("a:b,c:d"..split(",", ":"), [["a", "b"], ["c", "d"]])
        ass.deepStrictEqual("a:b,c:d"..split[",", ":"], [["a", "b"], ["c", "d"]])
    )
    it("stripTrailingNewline", --
        ass.strictEqual("a\nb\n"..stripTrailingNewline(), "a\nb")
        ass.strictEqual("a\nb"..stripTrailingNewline(), "a\nb")
    )
    it("ensureTrailingNewline", --
        ass.strictEqual("a\nb\n"..ensureTrailingNewline(), "a\nb\n")
        ass.strictEqual("a\nb"..ensureTrailingNewline(), "a\nb\n")
    )
    it("toBytes", --
        ass.deepStrictEqual(
            "A我们BC"..toBytes(),
            Uint8Array[0x41, 0xe6, 0x88, 0x91, 0xe4, 0xbb, 0xac, 0x42, 0x43]
        )
    )
)

describe("math", --
    it("approxEquals", --
        ass.strictEqual(Math..approxEquals(1, 1.000000001), true)
        ass.strictEqual(Math..approxEquals(1, 0.999999999), true)
        ass.strictEqual(Math..approxEquals(1, 1.001), false)
        ass.strictEqual(Math..approxEquals(1, 0.999), false)
    )
    it("approxGreaterThan", --
        ass.strictEqual(Math..approxGreaterThan(1, 1.000000001), true)
        ass.strictEqual(Math..approxGreaterThan(1, 0.999999999), true)
        ass.strictEqual(Math..approxGreaterThan(1, 1.001), false)
        ass.strictEqual(Math..approxGreaterThan(1, 0.999), true)
    )
    it("approxLessThan", --
        ass.strictEqual(Math..approxLessThan(1, 1.000000001), true)
        ass.strictEqual(Math..approxLessThan(1, 0.999999999), true)
        ass.strictEqual(Math..approxLessThan(1, 1.001), true)
        ass.strictEqual(Math..approxLessThan(1, 0.999), false)
    )
    it("radiansToDegrees", --
        ass.strictEqual(Math..radiansToDegrees(Math.PI), 180)
        ass.strictEqual(Math..radiansToDegrees(Math.PI * 2), 360)
    )
    it("degreesToRadians", --
        ass.strictEqual(Math..degreesToRadians(180), Math.PI)
        ass.strictEqual(Math..degreesToRadians(360), Math.PI * 2)
    )
    it("principalRadians", --
        ass.strictEqual(Math..principalRadians(Math.PI * 0.5), Math.PI * 0.5)
        ass.strictEqual(Math..principalRadians(Math.PI), Math.PI)
        ass.strictEqual(Math..principalRadians(Math.PI * 2), 0)
        ass.strictEqual(Math..principalRadians(-Math.PI), Math.PI)
        ass.strictEqual(Math..principalRadians(Math.PI * 1.5), -Math.PI * 0.5)
    )
    it("principalDegrees", --
        ass.strictEqual(Math..principalDegrees(90), 90)
        ass.strictEqual(Math..principalDegrees(180), 180)
        ass.strictEqual(Math..principalDegrees(360), 0)
        ass.strictEqual(Math..principalDegrees(-180), 180)
        ass.strictEqual(Math..principalDegrees(270), -90)
    )
    it("roundDecimal", --
        ass.strictEqual(Math..roundDecimal(1.678), 2)
        ass.strictEqual(Math..roundDecimal(1.678, 2), 1.68)
    )
    it("randomNumber", --
        r: repeat(60, <> Math..randomNumber(1, 3))
        ass(r.every(m -> 1 ≤ m < 3))
        ass(r.some(m -> 1 ≤ m < 2))
        ass(r.some(m -> 2 ≤ m < 3))
        ass(r..distinct().length > 1) # This is to test random. If not random, then length will be 1.
    )
    it("randomInt", --
        r: repeat(60, <> Math..randomInt(1, 3))
        ass(r.every(m -> m = 1 or m = 2))
        ass(r.some(m -> m = 1))
        ass(r.some(m -> m = 2))
        ass(r..distinct().length > 1)
    )
)

describe("array", --
    it("clone", --
        a: [1, 2, 3]
        b: a..clone()
        ass.notStrictEqual(b, a)
        ass.deepStrictEqual(b, a)
    )
    it("bound", --
        ass.strictEqual([]..bound(), -1)
        ass.strictEqual([1, 1, 1]..bound(), 2)
    )
    it("isEmpty", --
        ass.strictEqual([]..isEmpty(), true)
        ass.strictEqual([1]..isEmpty(), false)
    )
    it("portion", --
        ass.deepStrictEqual([1, 2, 3, 4, 5, 6]..portion(2, 3), [3, 4, 5])
        ass.deepStrictEqual([1, 2, 3, 4, 5, 6]..portion(2, void, 3), [3, 4])
        ass.deepStrictEqual([1, 2, 3, 4, 5, 6]..portion(2), [3, 4, 5, 6])
        ass.deepStrictEqual([1, 2, 3, 4, 5, 6]..portion(2, void, 0.999), [3, 4, 5, 6])
    )
    it("at", --
        ass.strictEqual([1, 2, 3, 4, 5]..at(1), 2)
        ass.strictEqual([1, 2, 3, 4, 5]..at(0.5), 3)
    )
    it("atOrNull", --
        ass.strictEqual([1, 2, 3, 4, 5]..atOrNull(1), 2)
        ass.strictEqual([1, 2, 3, 4, 5]..atOrNull(10), null)
    )
    it("atOrVoid", --
        ass.strictEqual([1, 2, 3, 4, 5]..atOrVoid(1), 2)
        ass.strictEqual([1, 2, 3, 4, 5]..atOrVoid(10), void)
    )
    it("includes", --
        ass.strictEqual([1, 2, 3]..includes(3), true)
        ass.strictEqual([1, 2, 3]..includes(4), false)
    )
    it("first", --
        ass.strictEqual([1, 2, 3, 4, 5]..first(), 1)
        ass.strictEqual([1, 2, 3, 4, 5]..first(m -> m mod 2 = 0), 2)
    )
    it("firstOrNull", --
        ass.strictEqual([1, 2, 3, 4, 5]..firstOrNull(m -> m mod 2 = 0), 2)
        ass.strictEqual([1, 2, 3, 4, 5]..firstOrNull(m -> m mod 2 = 2), null)
    )
    it("firstOrVoid", --
        ass.strictEqual([1, 2, 3, 4, 5]..firstOrVoid(m -> m mod 2 = 0), 2)
        ass.strictEqual([1, 2, 3, 4, 5]..firstOrVoid(m -> m mod 2 = 2), void)
    )
    it("last", --
        ass.strictEqual([1, 2, 3, 4, 5]..last(), 5)
        ass.strictEqual([1, 2, 3, 4, 5]..last(m -> m mod 2 = 0), 4)
    )
    it("lastOrNull", --
        ass.strictEqual([1, 2, 3, 4, 5]..lastOrNull(m -> m mod 2 = 0), 4)
        ass.strictEqual([1, 2, 3, 4, 5]..lastOrNull(m -> m mod 2 = 2), null)
    )
    it("lastOrVoid", --
        ass.strictEqual([1, 2, 3, 4, 5]..lastOrVoid(m -> m mod 2 = 0), 4)
        ass.strictEqual([1, 2, 3, 4, 5]..lastOrVoid(m -> m mod 2 = 2), void)
    )
    it("single", --
        ass.throws(-- [1, 2, 3, 4, 5]..single())
        ass.throws(-- [1, 2, 3, 4, 5]..single(m -> m = 10))
        ass.strictEqual([1, 2, 3, 4, 5]..single(m -> m = 3), 3)
    )
    it("singleOrNull", --
        ass.strictEqual([1, 2, 3, 4, 5]..singleOrNull(m -> m = 3), 3)
        ass.strictEqual([1, 2, 3, 4, 5]..singleOrNull(m -> m = 10), null)
    )
    it("singleOrVoid", --
        ass.strictEqual([1, 2, 3, 4, 5]..singleOrVoid(m -> m = 3), 3)
        ass.strictEqual([1, 2, 3, 4, 5]..singleOrVoid(m -> m = 10), void)
    )
    it("withMax", --
        ass.strictEqual([1, 2, 3, 4, 5]..withMax(m -> -m), 1)
        ass.strictEqual([1, 2, 3, 4, 5]..withMax(), 5)
    )
    it("withMin", --
        ass.strictEqual([1, 2, 3, 4, 5]..withMin(m -> -m), 5)
        ass.strictEqual([1, 2, 3, 4, 5]..withMin(), 1)
    )
    it("max", --
        ass.strictEqual([1, 2, 3, 4, 5]..max(m -> -m), -1)
        ass.strictEqual([1, 2, 3, 4, 5]..max(), 5)
    )
    it("min", --
        ass.strictEqual([1, 2, 3, 4, 5]..min(m -> -m), -5)
        ass.strictEqual([1, 2, 3, 4, 5]..min(), 1)
    )
    it("sum", --
        ass.strictEqual([1, 2, 3, 4, 5]..sum(), 15)
    )
    it("average", --
        ass.strictEqual([1, 2, 3, 4, 5]..average(), 3)
    )
    it("median", --
        ass.strictEqual([1, 2, 3, 4, 10]..median(), 3)
        ass.strictEqual([1, 2, 3, 4, 5, 10]..median(), 3.5)
    )
    it("product", --
        ass.strictEqual([1, 2, 3, 4, 5]..product(), 120)
    )
    it("group", --
        ass.deepStrictEqual([1, 2, 3, 4, 5, 6]..group(m -> m mod 2), [
            [0, [2, 4, 6]]
            [1, [1, 3, 5]]
        ])
    )
    it("sort", --
        ass.deepStrictEqual([2, 4, 3, 5, 1]..sort(), [1, 2, 3, 4, 5])
        ass.deepStrictEqual([2, 4, 3, 5, 1]..sort(m -> -m), [5, 4, 3, 2, 1])
    )
    it("sortDescending", --
        ass.deepStrictEqual([2, 4, 3, 5, 1]..sortDescending(), [5, 4, 3, 2, 1])
        ass.deepStrictEqual([2, 4, 3, 5, 1]..sortDescending(m -> -m), [1, 2, 3, 4, 5])
    )
    it("reverse", --
        ass.deepStrictEqual([1, 2, 3, 4, 5]..reverse(), [5, 4, 3, 2, 1])
    )
    it("except", --
        ass.deepStrictEqual([1, 2, 3, 4, 5]..except([3]), [1, 2, 4, 5])
    )
    it("distinct", --
        ass.deepStrictEqual([1, 2, 2, 3, 3]..distinct(), [1, 2, 3])
    )
    it("union", --
        ass.deepStrictEqual([1, 2, 3]..union([4, 5]), [1, 2, 3, 4, 5])
    )
    it("intersect", --
        ass.deepStrictEqual([1, 2, 3]..intersect([2, 3, 4, 5]), [2, 3])
        ass.deepStrictEqual([1, 2, 3]..intersect([4, 5]), [])
    )
    it("flatten", --
        ass.deepStrictEqual([1, [[2, 3], 4], 5]..flatten(), [1, 2, 3, 4, 5])
        ass.deepStrictEqual([1, [[2, 3], 4], 5]..flatten(1), [1, [2, 3], 4, 5])
    )
    it("forEach: without break", --
        r: 0
        ret: [1, 2, 3, 4, 5]..forEach(element ->
            r: r + element
        )
        ass.strictEqual(r, 15)
        ass.strictEqual(ret, void)
    )
    it("forEach: with break", --
        r: []
        ret: [1, 2, 3, 4, 5]..forEach((element, index) ->
            if index = 2
                break
            else
                r.push(element)
        )
        ass.deepStrictEqual(r, [1, 2])
        ass.strictEqual(ret, void)
    )
    it("toObject", --
        ass.deepStrictEqual([["a", 1], ["b", 2]]..toObject(), {a: 1, b: 2})
    )
    it("join", --
        ass.strictEqual([["a", "b"], ["c", "d"]]..join(":", ","), "a:b,c:d")
        ass.strictEqual([["a", "b"], ["c", "d"]]..join[":", ","], "a:b,c:d")
    )
    it("randomOne", --
        arr: [1, 2, 3, 4, 5, 6, 7, 8, 9]
        r: repeat(20, <> arr..randomOne())
        ass(r.every(m -> m is Number))
        ass(r..distinct().length > 1) # This is to test random. If not random, then length will be 1.
    )
    it("random without argument", --
        arr: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
        r1: arr..random()
        r2: arr..random()
        ass.strictEqual(r1.length, arr.length)
        ass.strictEqual(r2.length, arr.length)
        ass(r1.every(m -> m is Number))
        ass(r2.every(m -> m is Number))
        ass.notDeepStrictEqual(r1, r2)
    )
    it("random with argument", --
        arr: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
        r1: arr..random(20)
        r2: arr..random(20)
        ass.strictEqual(r1.length, 20)
        ass.strictEqual(r2.length, 20)
        ass(r1.every(m -> m is Number))
        ass(r2.every(m -> m is Number))
        ass.notDeepStrictEqual(r1, r2)
    )
    it("takeRandomOne", --
        arr: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
        r: repeat(20, <> arr..takeRandomOne())
        ass(r.every(m -> m is Number))
        ass(r..distinct().length > 1)
        ass.strictEqual(arr.length, 2)
    )
    it("takeRandom without argument", --
        arr1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
        arr2: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
        r1: arr1..takeRandom()
        r2: arr2..takeRandom()
        ass.strictEqual(r1.length, 20)
        ass.strictEqual(r2.length, 20)
        ass(r1.every(m -> m is Number))
        ass(r2.every(m -> m is Number))
        ass.notDeepStrictEqual(r1, r2)
        ass.strictEqual(arr1.length, 0)
        ass.strictEqual(arr2.length, 0)
    )
    it("takeRandom with argument", --
        arr1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
        arr2: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
        r1: arr1..takeRandom(20)
        r2: arr2..takeRandom(20)
        ass.strictEqual(r1.length, 20)
        ass.strictEqual(r2.length, 20)
        ass(r1.every(m -> m is Number))
        ass(r2.every(m -> m is Number))
        ass.notDeepStrictEqual(r1, r2)
        ass.strictEqual(arr1.length, 2)
        ass.strictEqual(arr2.length, 2)
    )
    it("removeAt", --
        arr: [1, 2, 3, 4, 5]
        r: arr..removeAt(1)
        ass.strictEqual(r, arr)
        ass.deepStrictEqual(arr, [1, 3, 4, 5])
    )
    it("remove", --
        arr: [1, 2, 2, 3, 4]
        r: arr..remove(2)
        ass.strictEqual(r, arr)
        ass.deepStrictEqual(arr, [1, 2, 3, 4])
        ass.throws(-- arr..remove(5))
    )
    it("removeAll", --
        arr: [1, 2, 2, 3, 4]
        r: arr..removeAll(2)
        ass.strictEqual(r, arr)
        ass.deepStrictEqual(arr, [1, 3, 4])
        r: arr..removeAll(2)
        ass.strictEqual(r, arr)
        ass.deepStrictEqual(arr, [1, 3, 4])
    )
    it("removeMatch", --
        arr: [1, 2, 3, 4, 5]
        r: arr..removeMatch(m -> m mod 2 = 0)
        ass.strictEqual(r, arr)
        ass.deepStrictEqual(arr, [1, 3, 4, 5])
        ass.throws(-- arr..removeMatch(m -> m = 10))
    )
    it("removeAllMatch", --
        arr: [1, 2, 3, 4, 5]
        r: arr..removeAllMatch(m -> m mod 2 = 0)
        ass.strictEqual(r, arr)
        ass.deepStrictEqual(arr, [1, 3, 5])
        r: arr..removeAllMatch(m -> m mod 2 = 0)
        ass.strictEqual(r, arr)
        ass.deepStrictEqual(arr, [1, 3, 5])
    )
)

describe("date", --
    it("add", --
        ass.strictEqual(Date(50000)..add(20000).getTime(), 70000)
    )
    it("subtract", --
        ass.strictEqual(Date(50000)..subtract(20000).getTime(), 30000)
    )
    it("equals", --
        ass.strictEqual(Date(50000)..equals(Date(50000)), true)
    )
)

describe("json", --
    it("clone", --
        a: {foo: 1}
        b: JSON..clone(a)
        ass.notStrictEqual(b, a)
        ass.deepStrictEqual(b, a)
    )
)

describe("number static", --
    it("isFraction", --
        ass.strictEqual(Number..isFraction(1.5), true)
        ass.strictEqual(Number..isFraction(1), false)
        ass.strictEqual(Number..isFraction(null), false)
    )
    it("parseFloat", --
        ass.strictEqual(Number..parseFloat("1.5"), 1.5)
        ass.strictEqual(Number..parseFloat("1.5%"), 0.015)
    )
)

describe("number", --
    it("approxEquals", --
        ass.strictEqual((1)..approxEquals(1.000000001), true)
        ass.strictEqual((1)..approxEquals(0.999999999), true)
        ass.strictEqual((1)..approxEquals(1.001), false)
        ass.strictEqual((1)..approxEquals(0.999), false)
    )
    it("approxGreaterThan", --
        ass.strictEqual((1)..approxGreaterThan(1.000000001), true)
        ass.strictEqual((1)..approxGreaterThan(0.999999999), true)
        ass.strictEqual((1)..approxGreaterThan(1.001), false)
        ass.strictEqual((1)..approxGreaterThan(0.999), true)
    )
    it("approxLessThan", --
        ass.strictEqual((1)..approxLessThan(1.000000001), true)
        ass.strictEqual((1)..approxLessThan(0.999999999), true)
        ass.strictEqual((1)..approxLessThan(1.001), true)
        ass.strictEqual((1)..approxLessThan(0.999), false)
    )
    it("pad", --
        ass.strictEqual((123.4)..pad(5, 2), "00123.40")
        ass.strictEqual((123.4)..pad(5), "00123")
    )
    it("format", --
        ass.strictEqual((123.4)..format{integerSize: 5, fractionalSize: 2}, "00123.40")
        ass.strictEqual((123.4)..format{integerSize: 5}, "00123")
        ass.strictEqual((123.4)..format(), "123")
        ass.strictEqual((123.6)..format(), "124")
        ass.strictEqual((-123.4)..format(), "-123")
        ass.strictEqual((123.4)..format{forcesSign}, "+123")
        ass.strictEqual((-123.4)..format{forcesSign}, "-123")
        ass.strictEqual((123.4)..format{radix: 16}, "7b")
        ass.strictEqual((1234567.890123)..format{integerGroupEnabled}, "1,234,568")
        ass.strictEqual((1234567.890123)..format{
            integerGroupEnabled
            integerGroupSeparator: "|"
            integerGroupSize: 4
        }, "123|4568")
        ass.strictEqual((1234567.890123)..format{
            fractionalSize: 9
            integerGroupEnabled
            fractionalGroupEnabled
        }, "1,234,567.890 123 000")
        ass.strictEqual((1234567.890123)..format{
            integerSize: 12
            fractionalSize: 9
            forcesSign
            integerGroupEnabled
            integerGroupSeparator: "|"
            integerGroupSize: 4
            fractionalGroupEnabled
            fractionalGroupSeparator: ","
            fractionalGroupSize: 2
        }, "+0000|0123|4567.89,01,23,00,0")
    )
)

describe("object", --
    it("isObject", --
        ass.strictEqual(Object..isObject{}, true)
        ass.strictEqual(Object..isObject[], true)
        ass.strictEqual(Object..isObject(<>), true)
        ass.strictEqual(Object..isObject(null), false)
        ass.strictEqual(Object..isObject(void), false)
        ass.strictEqual(Object..isObject(3), false)
    )
    it("isNormalObject", --
        ass.strictEqual(Object..isNormalObject{}, true)
        ass.strictEqual(Object..isNormalObject[], false)
        ass.strictEqual(Object..isNormalObject(<>), false)
        ass.strictEqual(Object..isNormalObject(null), false)
        ass.strictEqual(Object..isNormalObject(void), false)
        ass.strictEqual(Object..isNormalObject(3), false)
    )
    it("clone", --
        a: {foo: {bar: 1}, other: 2}
        b: Object..clone(a)
        ass.deepStrictEqual(b, a)
        ass.notStrictEqual(b, a)
        ass.strictEqual(b.foo, a.foo)
    )
    it("keyValues", --
        ass.deepStrictEqual(Object..keyValues{one: 1, other: 2}, [["one", 1], ["other", 2]])
    )
    it("deepAssign", --
        slaveSettings: {
            a: 1
            b: {
                c: 5
                d: 4
            }
            e: 8
        }
        masterSettings: {
            a: 2
            b: {
                c: 6
                g: 3
            }
            f: 0
        }
        Object..deepAssign(slaveSettings, masterSettings)
        ass.deepStrictEqual(slaveSettings, {
            a: 2
            b: {
                c: 6
                d: 4
                g: 3
            }
            e: 8
            f: 0
        })
    )
    it("absorb", --
        settings: {
            port: 8080
        }
        defaultSettings: {
            host: "127.0.0.1"
            port: 80
        }
        Object..absorb(settings, defaultSettings)
        ass.deepStrictEqual(settings, {host: "127.0.0.1", port: 8080})
    )
    it("deepAbsorb", --
        subjectSettings: {
            a: 1
            b: {
                c: 5
                d: 4
            }
            e: 8
        }
        objectSettings: {
            a: 2
            b: {
                c: 6
                g: 3
            }
            f: 0
        }
        Object..deepAbsorb(subjectSettings, objectSettings)
        ass.deepStrictEqual(subjectSettings, {
            a: 1
            b: {
                c: 5
                d: 4
                g: 3
            }
            e: 8
            f: 0
        })
    )
    it("deepClone", --
        a: {
            a: 1
            b: {
                c: 5
                d: 4
            }
            e: 8
        }
        b: Object..deepClone(a)
        ass.deepStrictEqual(b, a)
        ass.notStrictEqual(b, a)
        ass.deepStrictEqual(b.b, a.b)
        ass.notStrictEqual(b.b, a.b)
        c: {
            a: <>
            b: 7
        }
        c.a.m1: 5
        d: Object..deepClone(c)
        ass.deepStrictEqual(d, {a: {m1: 5}, b: 7})
    )
)

describe("timer", --
    it("IntervalTimer", done ->
        timer: IntervalTimer{interval: 100}
        count: 0
        timer.onArrive e ->
            now: Date()
            ass(now - e.nowTime < 200)
            ass(0 ≤ e.nowTime - e.idealTime < 200)
            ass.strictEqual(e.index, count)
            ass.strictEqual(timer.getCounter(), e.index + 1)
            ass.strictEqual(timer.getRunning(), true)
            count: self + 1
            if count = 5
                timer.stop()
                ass.strictEqual(timer.getRunning(), false)
                done()
    )
    it("Observer: change", done ->
        value: 1
        Observer(<> value).onChange(e ->
            ass.strictEqual(e.oldValue, 1)
            ass.strictEqual(e.newValue, 2)
            done()
        )
        setTimeout(<> value: 2, 200)
    )
    it("Observer: update", done ->
        count: 0
        value: 1
        Observer(<> value).onUpdate(e ->
            if count = 0
                ass.strictEqual(e.value, 2)
                count: self + 1
            else
                ass.strictEqual(e.value, 3)
                done()
        )
        value: 2
        setTimeout(<> value: 3, 200)
    )
    it("Observer: manual update", --
        updateCount: 0
        changeCount: 0
        value: 10
        observer: Observer(<> value).onUpdate(e ->
            updateCount: self + 1
        ).onChange(e ->
            changeCount: self + 1
        )
        ass.strictEqual(updateCount, 0)
        ass.strictEqual(changeCount, 0)
        value: 20
        observer.check()
        ass.strictEqual(updateCount, 1)
        ass.strictEqual(changeCount, 0)
        value: 30
        observer.check()
        ass.strictEqual(updateCount, 2)
        ass.strictEqual(changeCount, 1)
        observer.check()
        ass.strictEqual(updateCount, 2)
        ass.strictEqual(changeCount, 1)
    )
)

describe("cmath", --
    it("equals", --
        ass.strictEqual(cmath.equals(Point.from("1+2i"), Point.from("1+2i")), true)
        ass.strictEqual(cmath.equals(Point.from("1+2i"), Point.from("1+3i")), false)
    )
    it("approxEquals", --
        ass.strictEqual(cmath.approxEquals(Point.from("1+2i"), Point.from("1+2.000000001i")), true)
        ass.strictEqual(cmath.approxEquals(Point.from("1+2i"), Point.from("1+2.001i")), false)
    )
    it("opposite", --
        ass.strictEqual(cmath.opposite(Point.from("1+2i")).toString(), "(-1,-2)")
    )
    it("reciprocal", --
        ass.strictEqual(cmath.reciprocal(Point.from("1+2i")).toString(), "(0.2,-0.4)")
    )
    it("conjugate", --
        ass.strictEqual(cmath.conjugate(Point.from("1+2i")).toString(), "(1,-2)")
    )
    it("abs", --
        ass.strictEqual(cmath.abs(Point.from("1+2i")), 2.2360679774997896964)
        ass.strictEqual(cmath.abs(Point.from("-1")), 1)
        ass.strictEqual(cmath.abs(Point.from("i")), 1)
    )
    it("phase", --
        ass.strictEqual(cmath.phase(Point.from("1+2i"))..pad(1, 9), "1.107148718")
        ass.strictEqual(cmath.phase(Point.from("1")), 0)
        ass.strictEqual(cmath.phase(Point.from("i"))..pad(1, 9), "1.570796327")
        ass.strictEqual(cmath.phase(Point.from("-1"))..pad(1, 9), "3.141592654")
        ass.strictEqual(cmath.phase(Point.from("-i"))..pad(1, 9), "-1.570796327")
        ass.strictEqual(cmath.phase(Point.from("0")), 0)
    )
    it("phaseInDegrees", --
        ass.strictEqual(cmath.phaseInDegrees(Point.from("1+2i"))..pad(1, 9), "63.434948823")
        ass.strictEqual(cmath.phaseInDegrees(Point.from("1")), 0)
        ass.strictEqual(cmath.phaseInDegrees(Point.from("i")), 90)
        ass.strictEqual(cmath.phaseInDegrees(Point.from("-1")), 180)
        ass.strictEqual(cmath.phaseInDegrees(Point.from("-i")), -90)
        ass.strictEqual(cmath.phaseInDegrees(Point.from("0")), 0)
    )
    it("add", --
        ass.strictEqual(cmath.add(Point.from("1+2i"), Point.from("3+5i")).toString(), "(4,7)")
    )
    it("subtract", --
        ass.strictEqual(cmath.subtract(Point.from("1+2i"), Point.from("3+5i")).toString(), "(-2,-3)")
    )
    it("multiply", --
        ass.strictEqual(cmath.multiply(Point.from("1+2i"), Point.from("3+5i")).toString(), "(-7,11)")
    )
    it("divide", --
        ass.strictEqual(cmath.divide(Point.from("1+2i"), Point.from("3+4i")).toString(), "(0.44,0.08)")
    )
    it("distance", --
        ass.strictEqual(cmath.distance(Point.from("1+2i"), Point.from("3+5i"))..pad(1, 9), "3.605551275")
    )
    it("exp", --
        r: cmath.exp(Point.from("1+2i"))
        ass.strictEqual(r.x..pad(1, 9), "-1.131204384")
        ass.strictEqual(r.y..pad(1, 9), "2.471726672")
    )
    it("log", --
        r: cmath.log(Point.from("1+2i"))
        ass.strictEqual(r.x..pad(1, 9), "0.804718956")
        ass.strictEqual(r.y..pad(1, 9), "1.107148718")
    )
    it("sqrt", --
        r: cmath.sqrt(Point.from("1+2i"))
        ass.strictEqual(r.x..pad(1, 9), "1.272019650")
        ass.strictEqual(r.y..pad(1, 9), "0.786151378")
    )
    it("cos", --
        r: cmath.cos(Point.from("1+2i"))
        ass.strictEqual(r.x..pad(1, 9), "2.032723007")
        ass.strictEqual(r.y..pad(1, 9), "-3.051897799")
    )
    it("sin", --
        r: cmath.sin(Point.from("1+2i"))
        ass.strictEqual(r.x..pad(1, 9), "3.165778513")
        ass.strictEqual(r.y..pad(1, 9), "1.959601041")
    )
    it("tan", --
        r: cmath.tan(Point.from("1+2i"))
        ass.strictEqual(r.x..pad(1, 9), "0.033812826")
        ass.strictEqual(r.y..pad(1, 9), "1.014793616")
    )
    it("acos", --
        r: cmath.acos(Point.from("1+2i"))
        ass.strictEqual(r.x..pad(1, 9), "1.143717740")
        ass.strictEqual(r.y..pad(1, 9), "-1.528570919")
    )
    it("asin", --
        r: cmath.asin(Point.from("1+2i"))
        ass.strictEqual(r.x..pad(1, 9), "0.427078586")
        ass.strictEqual(r.y..pad(1, 9), "1.528570919")
    )
    it("atan", --
        r: cmath.atan(Point.from("1+2i"))
        ass.strictEqual(r.x..pad(1, 9), "1.338972522")
        ass.strictEqual(r.y..pad(1, 9), "0.402359478")
    )
)

describe("point", --
    it("new", --
        p: Point(1, 2)
        ass.strictEqual(p.x, 1)
        ass.strictEqual(p.y, 2)
    )
    it("from: 2 numbers", --
        p: Point.from(1, 2)
        ass.strictEqual(p.x, 1)
        ass.strictEqual(p.y, 2)
    )
    it("from: 1 number", --
        p: Point.from(1)
        ass.strictEqual(p.x, 1)
        ass.strictEqual(p.y, 0)
    )
    it("from: point", --
        p1: Point(1, 2)
        p2: Point.from(p1)
        ass.notStrictEqual(p2, p1)
        ass.strictEqual(p2.x, 1)
        ass.strictEqual(p2.y, 2)
    )
    it("from: string", --
        p: Point.from("1+2i")
        ass.strictEqual(p.x, 1)
        ass.strictEqual(p.y, 2)
    )
    it("from: array", --
        p: Point.from[1, 2]
        ass.strictEqual(p.x, 1)
        ass.strictEqual(p.y, 2)
    )
    it("fromArray", --
        p: Point.fromArray[1, 2]
        ass.strictEqual(p.x, 1)
        ass.strictEqual(p.y, 2)
    )
    it("fromString", --
        p: Point.fromString("1+2i")
        ass.strictEqual(p.x, 1)
        ass.strictEqual(p.y, 2)
    )
    it("fromPolar", --
        p: Point.fromPolar(2, Math.PI / 6)
        ass.strictEqual(p.x..pad(1, 9), "1.732050808")
        ass.strictEqual(p.y..pad(1, 9), "1.000000000")
    )
    it("fromPolarInDegrees", --
        p: Point.fromPolarInDegrees(2, 30)
        ass.strictEqual(p.x..pad(1, 9), "1.732050808")
        ass.strictEqual(p.y..pad(1, 9), "1.000000000")
        ass.strictEqual(Point.fromPolarInDegrees(2, 0).toString(), "(2,0)")
        ass.strictEqual(Point.fromPolarInDegrees(2, 90).toString(), "(0,2)")
        ass.strictEqual(Point.fromPolarInDegrees(2, 180).toString(), "(-2,0)")
        ass.strictEqual(Point.fromPolarInDegrees(2, -90).toString(), "(0,-2)")
    )
    it("real", --
        ass.strictEqual(Point(1, 2).real(), 1)
    )
    it("imaginary", --
        ass.strictEqual(Point(1, 2).imaginary(), 2)
    )
    it("toString", --
        ass.strictEqual(Point(-7, 5).toString(), "(-7,5)")
    )
    it("toComplexString", --
        ass.strictEqual(Point(1, 2).toComplexString(), "1+2i")
        ass.strictEqual(Point(0, 0).toComplexString(), "0+0i")
        ass.strictEqual(Point(0, 1).toComplexString(), "0+1i")
        ass.strictEqual(Point(0, -1).toComplexString(), "0-1i")
        ass.strictEqual(Point(-1, 0).toComplexString(), "-1+0i")
    )
    it("toArray", --
        ass.deepStrictEqual(Point(1, 2).toArray(), [1, 2])
    )
    it("clone", --
        p1: Point(1, 2)
        p2: p1.clone()
        ass.notStrictEqual(p2, p1)
        ass.strictEqual(p2.x, 1)
        ass.strictEqual(p2.y, 2)
    )
    it("equals", --
        ass.strictEqual(Point.from("1+2i").equals(Point.from("1+2i")), true)
        ass.strictEqual(Point.from("1+2i").equals(Point.from("1+3i")), false)
    )
    it("approxEquals", --
        ass.strictEqual(Point.from("1+2i").approxEquals(Point.from("1+2.000000001i")), true)
        ass.strictEqual(Point.from("1+2i").approxEquals(Point.from("1+2.001i")), false)
    )
    it("opposite", --
        ass.strictEqual(Point.from("1+2i").opposite().toString(), "(-1,-2)")
    )
    it("reciprocal", --
        ass.strictEqual(Point.from("1+2i").reciprocal().toString(), "(0.2,-0.4)")
    )
    it("conjugate", --
        ass.strictEqual(Point.from("1+2i").conjugate().toString(), "(1,-2)")
    )
    it("abs", --
        ass.strictEqual(Point.from("1+2i").abs(), 2.2360679774997896964)
        ass.strictEqual(Point.from("-1").abs(), 1)
        ass.strictEqual(Point.from("i").abs(), 1)
    )
    it("add", --
        ass.strictEqual(Point.from("1+2i").add(Point.from("3+5i")).toString(), "(4,7)")
    )
    it("subtract", --
        ass.strictEqual(Point.from("1+2i").subtract(Point.from("3+5i")).toString(), "(-2,-3)")
    )
    it("multiply", --
        ass.strictEqual(Point.from("1+2i").multiply(Point.from("3+5i")).toString(), "(-7,11)")
    )
    it("divide", --
        ass.strictEqual(Point.from("1+2i").divide(Point.from("3+4i")).toString(), "(0.44,0.08)")
    )
    it("distance", --
        ass.strictEqual(Point.from("1+2i").distance(Point.from("3+5i"))..pad(1, 9), "3.605551275")
    )
    it("dotProduct", --
        ass.strictEqual(Point(2, 3).dotProduct(Point(4, 5)), 23)
    )
    it("crossProduct", --
        ass.strictEqual(Point(2, 3).crossProduct(Point(4, 5)), -2)
    )
    it("isOppositeTo", --
        ass.strictEqual(Point(1, 2).isOppositeTo(Point(-1, -2)), true)
        ass.strictEqual(Point(1, 2).isOppositeTo(Point(1, -2)), false)
    )
    it("phase", --
        ass.strictEqual(Point.from("1+2i").phase()..pad(1, 9), "1.107148718")
    )
    it("phaseTo", --
        ass.strictEqual(Point.from("1+2i").phaseTo(Point.from("i"))..pad(1, 9), "0.463647609")
    )
    it("phaseInDegrees", --
        ass.strictEqual(Point.from("1+2i").phaseInDegrees()..pad(1, 9), "63.434948823")
    )
    it("phaseInDegreesTo", --
        ass.strictEqual(Point.from("1+2i").phaseInDegreesTo(Point.from("i"))..pad(1, 9), "26.565051177")
    )
    it("scale", --
        ass.strictEqual(Point(1, 2).scale(2).toString(), "(2,4)")
        ass.strictEqual(Point(1, 2).scale(2, 3).toString(), "(2,6)")
    )
    it("rotate", --
        p: Point(1, 2).rotate(Math.PI / 6)
        ass.strictEqual(p.x..pad(1, 9), "-0.133974596")
        ass.strictEqual(p.y..pad(1, 9), "2.232050808")
    )
    it("rotateDegrees", --
        p: Point(1, 2).rotateDegrees(30)
        ass.strictEqual(p.x..pad(1, 9), "-0.133974596")
        ass.strictEqual(p.y..pad(1, 9), "2.232050808")
    )
)

describe("Uint8Array static", --
    it("fromBase64", --
        bytes: Uint8Array..fromBase64("AAECAw==")
        ass(bytes is Uint8Array)
        ass.deepStrictEqual(Array.from(bytes), [0, 1, 2, 3])
    )
    it("fromString", --
        ass.deepStrictEqual(
            Uint8Array..fromString("A我们BC"),
            Uint8Array[0x41, 0xe6, 0x88, 0x91, 0xe4, 0xbb, 0xac, 0x42, 0x43]
        )
    )
    it("fromHex", --
        ass.deepStrictEqual(
            Uint8Array..fromHex(""),
            Uint8Array[]
        )
        ass.deepStrictEqual(
            Uint8Array..fromHex("010a"),
            Uint8Array[0x01, 0x0a]
        )
        ass.throws(-- Uint8Array..fromHex("0"))
    )
)

describe("Uint8Array", --
    it("bound", --
        ass.strictEqual(Uint8Array[]..bound(), -1)
        ass.strictEqual(Uint8Array[1, 1, 1]..bound(), 2)
    )
    it("toBase64", --
        ass.strictEqual(Uint8Array[0, 1, 2, 3]..toBase64(), "AAECAw==")
    )
    it("toString", --
        ass.strictEqual(
            Uint8Array[0x41, 0xe6, 0x88, 0x91, 0xe4, 0xbb, 0xac, 0x42, 0x43]..toString(),
            "A我们BC"
        )
    )
    it("toHex", --
        ass.strictEqual(Uint8Array[]..toHex(), "")
        ass.strictEqual(Uint8Array[0x01, 0x0a]..toHex(), "010a")
    )
)

describe("Promise static", --
    it("delay", --
        oldTime: Date()
        Promise..delay(500).then(<>
            actualMs: Date() - oldTime
            ass(500 ≤ actualMs ≤ 525)
        )
    )
)
