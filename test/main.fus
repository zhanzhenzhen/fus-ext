fus 1.3.1, radical

import "./manifest" all
ass: import "assert"

describe("loop", --
    it("array: number, diamond function", --
        r: []
        ret: loop(5, <> r.push(1))
        ass.deepStrictEqual(r, [1, 1, 1, 1, 1])
        ass.strictEqual(ret, void)
    )

    it("array: number, arrow function", --
        r: []
        loop(5, i -> r.push(i))
        ass.deepStrictEqual(r, [0, 1, 2, 3, 4])
    )

    it("object: by 2 with break", --
        r: []
        loop{1 by 2 for i ->
            r.push i
            if i > 9
                break
        }
        ass.deepStrictEqual(r, [1, 3, 5, 7, 9, 11])
    )

    it("array: number, arrow function with break", --
        r: []
        loop(10, i ->
            r.push(i)
            if i > 5
                break
        )
        ass.deepStrictEqual(r, [0, 1, 2, 3, 4, 5, 6])
    )

    it("object: canonical", --
        r: []
        loop{from: 1, to: 5, for: i ->
            r.push(i)
        }
        ass.deepStrictEqual(r, [1, 2, 3, 4, 5])
    )

    it("object: normal", --
        r: []
        loop{1 to 5 for i ->
            r.push(i)
        }
        ass.deepStrictEqual(r, [1, 2, 3, 4, 5])
    )

    it("object: by -1", --
        r: []
        loop{5 to 1 by -1 for i ->
            r.push(i)
        }
        ass.deepStrictEqual(r, [5, 4, 3, 2, 1])
    )

    it("function: with break", --
        r: []
        loop i ->
            r.push i
            if i > 3
                break
        ass.deepStrictEqual(r, [0, 1, 2, 3, 4])
    )
)

describe("repeat", --
    it("repeat", --
        ass.deepStrictEqual(repeat(5, i -> i + 2), [2, 3, 4, 5, 6])
        ass.deepStrictEqual(repeat(5), [0, 1, 2, 3, 4])
        ass.deepStrictEqual(repeat{1 to 10 by 2}, [1, 3, 5, 7, 9])
        ass.deepStrictEqual(repeat{1 by 2 for i -> i > 9 ? break else i}, [1, 3, 5, 7, 9])
    )
)

describe("enum", --
    it("enum", --
        ass.deepStrictEqual(enum{a}, {a: 0})
        ass.deepStrictEqual(enum{a, b}, {a: 0, b: 1})
    )
)

describe("compose", --
    it("multiple arguments", --
        a: compose(Math.min, Math.abs)
        ass.strictEqual(a(-2, -3), 3)
    )
    it("array argument", --
        a: compose[Math.min, Math.abs]
        ass.strictEqual(a(-2, -3), 3)
    )
)

describe("spread", --
    it("spread", --
        ass.deepStrictEqual(spread(0, 3), [0, 0, 0])
    )
)

describe("eventField", --
    it("eventField", --
        r: null
        Obj: class
            new: --
                me.onClick: eventField()
            makeClick: -- me.onClick.fire()
        obj: Obj()
        obj.onClick(--
            r: true
        )
        obj.makeClick()
        ass.strictEqual(r, true)
    )
)

describe("string", --
    it("format", --
        ass.strictEqual("a {0} b {1}"..format("qq", "r"), "a qq b r")
    )
    it("insert", --
        ass.strictEqual("aaa"..insert(1, "b"), "abaa")
    )
    it("remove", --
        ass.strictEqual("abcde"..remove(1, 2), "ade")
        ass.strictEqual("abcde"..remove(1), "acde")
    )
    it("matches", --
        matches: "aaa bbb"..matches(r"a")
        ass(matches is Array)
        ass.strictEqual(matches.length, 3)
        ass(matches.0 is Array)
        ass.strictEqual(matches.0.length, 1)
        ass.strictEqual(matches.0.0, "a")
        ass.strictEqual(matches.0.index, 0)
        ass(matches.1 is Array)
        ass.strictEqual(matches.1.length, 1)
        ass.strictEqual(matches.1.0, "a")
        ass.strictEqual(matches.1.index, 1)
        ass(matches.2 is Array)
        ass.strictEqual(matches.2.length, 1)
        ass.strictEqual(matches.2.0, "a")
        ass.strictEqual(matches.2.index, 2)
    )
    it("capitalize", --
        ass.strictEqual("abc"..capitalize(), "Abc")
    )
    it("deepSplit", --
        ass.deepStrictEqual("a:b,c:d"..deepSplit(",", ":"), [["a", "b"], ["c", "d"]])
        ass.deepStrictEqual("a:b,c:d"..deepSplit[",", ":"], [["a", "b"], ["c", "d"]])
    )
    it("stripTrailingNewline", --
        ass.strictEqual("a\nb\n"..stripTrailingNewline(), "a\nb")
        ass.strictEqual("a\nb"..stripTrailingNewline(), "a\nb")
    )
    it("ensureTrailingNewline", --
        ass.strictEqual("a\nb\n"..ensureTrailingNewline(), "a\nb\n")
        ass.strictEqual("a\nb"..ensureTrailingNewline(), "a\nb\n")
    )
)

describe("math", --
    it("approxEquals", --
        ass.strictEqual(Math..approxEquals(1, 1.000000001), true)
        ass.strictEqual(Math..approxEquals(1, 0.999999999), true)
        ass.strictEqual(Math..approxEquals(1, 1.001), false)
        ass.strictEqual(Math..approxEquals(1, 0.999), false)
    )
    it("approxGreaterThan", --
        ass.strictEqual(Math..approxGreaterThan(1, 1.000000001), true)
        ass.strictEqual(Math..approxGreaterThan(1, 0.999999999), true)
        ass.strictEqual(Math..approxGreaterThan(1, 1.001), false)
        ass.strictEqual(Math..approxGreaterThan(1, 0.999), true)
    )
    it("approxLessThan", --
        ass.strictEqual(Math..approxLessThan(1, 1.000000001), true)
        ass.strictEqual(Math..approxLessThan(1, 0.999999999), true)
        ass.strictEqual(Math..approxLessThan(1, 1.001), true)
        ass.strictEqual(Math..approxLessThan(1, 0.999), false)
    )
    it("radiansToDegrees", --
        ass.strictEqual(Math..radiansToDegrees(Math.PI), 180)
        ass.strictEqual(Math..radiansToDegrees(Math.PI * 2), 360)
    )
    it("degreesToRadians", --
        ass.strictEqual(Math..degreesToRadians(180), Math.PI)
        ass.strictEqual(Math..degreesToRadians(360), Math.PI * 2)
    )
    it("principalRadians", --
        ass.strictEqual(Math..principalRadians(Math.PI * 0.5), Math.PI * 0.5)
        ass.strictEqual(Math..principalRadians(Math.PI), Math.PI)
        ass.strictEqual(Math..principalRadians(Math.PI * 2), 0)
        ass.strictEqual(Math..principalRadians(-Math.PI), Math.PI)
        ass.strictEqual(Math..principalRadians(Math.PI * 1.5), -Math.PI * 0.5)
    )
    it("principalDegrees", --
        ass.strictEqual(Math..principalDegrees(90), 90)
        ass.strictEqual(Math..principalDegrees(180), 180)
        ass.strictEqual(Math..principalDegrees(360), 0)
        ass.strictEqual(Math..principalDegrees(-180), 180)
        ass.strictEqual(Math..principalDegrees(270), -90)
    )
    it("roundDecimal", --
        ass.strictEqual(Math..roundDecimal(1.678), 2)
        ass.strictEqual(Math..roundDecimal(1.678, 2), 1.68)
    )
    it("randomNumber", --
        r: repeat(60, <> Math..randomNumber(1, 3))
        ass(r.every(m -> 1 ≤ m < 3))
        ass(r.some(m -> 1 ≤ m < 2))
        ass(r.some(m -> 2 ≤ m < 3))
        ass(r..distinct().length > 1) # This is to test random. If not random, then length will be 1.
    )
    it("randomInt", --
        r: repeat(60, <> Math..randomInt(1, 3))
        ass(r.every(m -> m = 1 or m = 2))
        ass(r.some(m -> m = 1))
        ass(r.some(m -> m = 2))
        ass(r..distinct().length > 1)
    )
)

describe("array", --
    it("clone", --
        a: [1, 2, 3]
        b: a..clone()
        ass.notStrictEqual(b, a)
        ass.deepStrictEqual(b, a)
    )
    it("isEmpty", --
        ass.strictEqual([]..isEmpty(), true)
        ass.strictEqual([1]..isEmpty(), false)
    )
    it("portion", --
        ass.deepStrictEqual([1, 2, 3, 4, 5, 6]..portion(2, 3), [3, 4, 5])
        ass.deepStrictEqual([1, 2, 3, 4, 5, 6]..portion(2, void, 3), [3, 4])
        ass.deepStrictEqual([1, 2, 3, 4, 5, 6]..portion(2), [3, 4, 5, 6])
        ass.deepStrictEqual([1, 2, 3, 4, 5, 6]..portion(2, void, 0.999), [3, 4, 5, 6])
    )
    it("at", --
        ass.strictEqual([1, 2, 3, 4, 5]..at(1), 2)
        ass.strictEqual([1, 2, 3, 4, 5]..at(0.5), 3)
    )
    it("atOrNull", --
        ass.strictEqual([1, 2, 3, 4, 5]..atOrNull(1), 2)
        ass.strictEqual([1, 2, 3, 4, 5]..atOrNull(10), null)
    )
    it("atOrVoid", --
        ass.strictEqual([1, 2, 3, 4, 5]..atOrVoid(1), 2)
        ass.strictEqual([1, 2, 3, 4, 5]..atOrVoid(10), void)
    )
    it("includes", --
        ass.strictEqual([1, 2, 3]..includes(3), true)
        ass.strictEqual([1, 2, 3]..includes(4), false)
    )
    it("first", --
        ass.strictEqual([1, 2, 3, 4, 5]..first(), 1)
        ass.strictEqual([1, 2, 3, 4, 5]..first(m -> m mod 2 = 0), 2)
    )
    it("firstOrNull", --
        ass.strictEqual([1, 2, 3, 4, 5]..firstOrNull(m -> m mod 2 = 0), 2)
        ass.strictEqual([1, 2, 3, 4, 5]..firstOrNull(m -> m mod 2 = 2), null)
    )
    it("firstOrVoid", --
        ass.strictEqual([1, 2, 3, 4, 5]..firstOrVoid(m -> m mod 2 = 0), 2)
        ass.strictEqual([1, 2, 3, 4, 5]..firstOrVoid(m -> m mod 2 = 2), void)
    )
    it("last", --
        ass.strictEqual([1, 2, 3, 4, 5]..last(), 5)
        ass.strictEqual([1, 2, 3, 4, 5]..last(m -> m mod 2 = 0), 4)
    )
    it("lastOrNull", --
        ass.strictEqual([1, 2, 3, 4, 5]..lastOrNull(m -> m mod 2 = 0), 4)
        ass.strictEqual([1, 2, 3, 4, 5]..lastOrNull(m -> m mod 2 = 2), null)
    )
    it("lastOrVoid", --
        ass.strictEqual([1, 2, 3, 4, 5]..lastOrVoid(m -> m mod 2 = 0), 4)
        ass.strictEqual([1, 2, 3, 4, 5]..lastOrVoid(m -> m mod 2 = 2), void)
    )
    it("single", --
        ass.throws(-- [1, 2, 3, 4, 5]..single())
        ass.throws(-- [1, 2, 3, 4, 5]..single(m -> m = 10))
        ass.strictEqual([1, 2, 3, 4, 5]..single(m -> m = 3), 3)
    )
    it("singleOrNull", --
        ass.strictEqual([1, 2, 3, 4, 5]..singleOrNull(m -> m = 3), 3)
        ass.strictEqual([1, 2, 3, 4, 5]..singleOrNull(m -> m = 10), null)
    )
    it("singleOrVoid", --
        ass.strictEqual([1, 2, 3, 4, 5]..singleOrVoid(m -> m = 3), 3)
        ass.strictEqual([1, 2, 3, 4, 5]..singleOrVoid(m -> m = 10), void)
    )
    it("withMax", --
        ass.strictEqual([1, 2, 3, 4, 5]..withMax(m -> -m), 1)
        ass.strictEqual([1, 2, 3, 4, 5]..withMax(), 5)
    )
    it("withMin", --
        ass.strictEqual([1, 2, 3, 4, 5]..withMin(m -> -m), 5)
        ass.strictEqual([1, 2, 3, 4, 5]..withMin(), 1)
    )
    it("max", --
        ass.strictEqual([1, 2, 3, 4, 5]..max(m -> -m), -1)
        ass.strictEqual([1, 2, 3, 4, 5]..max(), 5)
    )
    it("min", --
        ass.strictEqual([1, 2, 3, 4, 5]..min(m -> -m), -5)
        ass.strictEqual([1, 2, 3, 4, 5]..min(), 1)
    )
    it("sum", --
        ass.strictEqual([1, 2, 3, 4, 5]..sum(), 15)
    )
    it("average", --
        ass.strictEqual([1, 2, 3, 4, 5]..average(), 3)
    )
    it("median", --
        ass.strictEqual([1, 2, 3, 4, 10]..median(), 3)
        ass.strictEqual([1, 2, 3, 4, 5, 10]..median(), 3.5)
    )
    it("product", --
        ass.strictEqual([1, 2, 3, 4, 5]..product(), 120)
    )
    it("group", --
        ass.deepStrictEqual([1, 2, 3, 4, 5, 6]..group(m -> m mod 2), [
            [0, [2, 4, 6]]
            [1, [1, 3, 5]]
        ])
    )
    it("sort", --
        ass.deepStrictEqual([2, 4, 3, 5, 1]..sort(), [1, 2, 3, 4, 5])
        ass.deepStrictEqual([2, 4, 3, 5, 1]..sort(m -> -m), [5, 4, 3, 2, 1])
    )
    it("sortDescending", --
        ass.deepStrictEqual([2, 4, 3, 5, 1]..sortDescending(), [5, 4, 3, 2, 1])
        ass.deepStrictEqual([2, 4, 3, 5, 1]..sortDescending(m -> -m), [1, 2, 3, 4, 5])
    )
    it("reverse", --
        ass.deepStrictEqual([1, 2, 3, 4, 5]..reverse(), [5, 4, 3, 2, 1])
    )
    it("except", --
        ass.deepStrictEqual([1, 2, 3, 4, 5]..except([3]), [1, 2, 4, 5])
    )
    it("distinct", --
        ass.deepStrictEqual([1, 2, 2, 3, 3]..distinct(), [1, 2, 3])
    )
    it("union", --
        ass.deepStrictEqual([1, 2, 3]..union([4, 5]), [1, 2, 3, 4, 5])
    )
    it("intersect", --
        ass.deepStrictEqual([1, 2, 3]..intersect([2, 3, 4, 5]), [2, 3])
        ass.deepStrictEqual([1, 2, 3]..intersect([4, 5]), [])
    )
    it("flatten", --
        ass.deepStrictEqual([1, [[2, 3], 4], 5]..flatten(), [1, 2, 3, 4, 5])
        ass.deepStrictEqual([1, [[2, 3], 4], 5]..flatten(1), [1, [2, 3], 4, 5])
    )
    it("toObject", --
        ass.deepStrictEqual([["a", 1], ["b", 2]]..toObject(), {a: 1, b: 2})
    )
    it("deepJoin", --
        ass.strictEqual([["a", "b"], ["c", "d"]]..deepJoin(":", ","), "a:b,c:d")
        ass.strictEqual([["a", "b"], ["c", "d"]]..deepJoin[":", ","], "a:b,c:d")
    )
    it("randomOne", --
        arr: [1, 2, 3, 4, 5, 6, 7, 8, 9]
        r: repeat(20, <> arr..randomOne())
        ass(r.every(m -> m is Number))
        ass(r..distinct().length > 1) # This is to test random. If not random, then length will be 1.
    )
    it("random without argument", --
        arr: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
        r1: arr..random()
        r2: arr..random()
        ass.strictEqual(r1.length, arr.length)
        ass.strictEqual(r2.length, arr.length)
        ass(r1.every(m -> m is Number))
        ass(r2.every(m -> m is Number))
        ass.notDeepStrictEqual(r1, r2)
    )
    it("random with argument", --
        arr: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
        r1: arr..random(20)
        r2: arr..random(20)
        ass.strictEqual(r1.length, 20)
        ass.strictEqual(r2.length, 20)
        ass(r1.every(m -> m is Number))
        ass(r2.every(m -> m is Number))
        ass.notDeepStrictEqual(r1, r2)
    )
    it("takeRandomOne", --
        arr: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
        r: repeat(20, <> arr..takeRandomOne())
        ass(r.every(m -> m is Number))
        ass(r..distinct().length > 1)
        ass.strictEqual(arr.length, 2)
    )
    it("takeRandom without argument", --
        arr1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
        arr2: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
        r1: arr1..takeRandom()
        r2: arr2..takeRandom()
        ass.strictEqual(r1.length, 20)
        ass.strictEqual(r2.length, 20)
        ass(r1.every(m -> m is Number))
        ass(r2.every(m -> m is Number))
        ass.notDeepStrictEqual(r1, r2)
        ass.strictEqual(arr1.length, 0)
        ass.strictEqual(arr2.length, 0)
    )
    it("takeRandom with argument", --
        arr1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
        arr2: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]
        r1: arr1..takeRandom(20)
        r2: arr2..takeRandom(20)
        ass.strictEqual(r1.length, 20)
        ass.strictEqual(r2.length, 20)
        ass(r1.every(m -> m is Number))
        ass(r2.every(m -> m is Number))
        ass.notDeepStrictEqual(r1, r2)
        ass.strictEqual(arr1.length, 2)
        ass.strictEqual(arr2.length, 2)
    )
    it("removeAt", --
        arr: [1, 2, 3, 4, 5]
        r: arr..removeAt(1)
        ass.strictEqual(r, arr)
        ass.deepStrictEqual(arr, [1, 3, 4, 5])
    )
    it("remove", --
        arr: [1, 2, 2, 3, 4]
        r: arr..remove(2)
        ass.strictEqual(r, arr)
        ass.deepStrictEqual(arr, [1, 2, 3, 4])
        ass.throws(-- arr..remove(5))
    )
    it("removeAll", --
        arr: [1, 2, 2, 3, 4]
        r: arr..removeAll(2)
        ass.strictEqual(r, arr)
        ass.deepStrictEqual(arr, [1, 3, 4])
        r: arr..removeAll(2)
        ass.strictEqual(r, arr)
        ass.deepStrictEqual(arr, [1, 3, 4])
    )
    it("removeMatch", --
        arr: [1, 2, 3, 4, 5]
        r: arr..removeMatch(m -> m mod 2 = 0)
        ass.strictEqual(r, arr)
        ass.deepStrictEqual(arr, [1, 3, 4, 5])
        ass.throws(-- arr..removeMatch(m -> m = 10))
    )
    it("removeAllMatch", --
        arr: [1, 2, 3, 4, 5]
        r: arr..removeAllMatch(m -> m mod 2 = 0)
        ass.strictEqual(r, arr)
        ass.deepStrictEqual(arr, [1, 3, 5])
        r: arr..removeAllMatch(m -> m mod 2 = 0)
        ass.strictEqual(r, arr)
        ass.deepStrictEqual(arr, [1, 3, 5])
    )
)

describe("date", --
    it("add", --
        ass.strictEqual(Date(50000)..add(20000).getTime(), 70000)
    )
    it("subtract", --
        ass.strictEqual(Date(50000)..subtract(20000).getTime(), 30000)
    )
    it("equals", --
        ass.strictEqual(Date(50000)..equals(Date(50000)), true)
    )
)

describe("json", --
    it("clone", --
        a: {foo: 1}
        b: JSON..clone(a)
        ass.notStrictEqual(b, a)
        ass.deepStrictEqual(b, a)
    )
)

describe("number static", --
    it("isFraction", --
        ass.strictEqual(Number..isFraction(1.5), true)
        ass.strictEqual(Number..isFraction(1), false)
        ass.strictEqual(Number..isFraction(null), false)
    )
    it("parseFloat", --
        ass.strictEqual(Number..parseFloat("1.5"), 1.5)
        ass.strictEqual(Number..parseFloat("1.5%"), 0.015)
    )
)

describe("number", --
    it("approxEquals", --
        ass.strictEqual((1)..approxEquals(1.000000001), true)
        ass.strictEqual((1)..approxEquals(0.999999999), true)
        ass.strictEqual((1)..approxEquals(1.001), false)
        ass.strictEqual((1)..approxEquals(0.999), false)
    )
    it("approxGreaterThan", --
        ass.strictEqual((1)..approxGreaterThan(1.000000001), true)
        ass.strictEqual((1)..approxGreaterThan(0.999999999), true)
        ass.strictEqual((1)..approxGreaterThan(1.001), false)
        ass.strictEqual((1)..approxGreaterThan(0.999), true)
    )
    it("approxLessThan", --
        ass.strictEqual((1)..approxLessThan(1.000000001), true)
        ass.strictEqual((1)..approxLessThan(0.999999999), true)
        ass.strictEqual((1)..approxLessThan(1.001), true)
        ass.strictEqual((1)..approxLessThan(0.999), false)
    )
    it("pad", --
        ass.strictEqual((123.4)..pad(5, 2), "00123.40")
        ass.strictEqual((123.4)..pad(5), "00123")
    )
    it("format", --
        ass.strictEqual((123.4)..format{integerSize: 5, fractionalSize: 2}, "00123.40")
        ass.strictEqual((123.4)..format{integerSize: 5}, "00123")
        ass.strictEqual((123.4)..format(), "123")
        ass.strictEqual((123.6)..format(), "124")
        ass.strictEqual((-123.4)..format(), "-123")
        ass.strictEqual((123.4)..format{forcesSign}, "+123")
        ass.strictEqual((-123.4)..format{forcesSign}, "-123")
        ass.strictEqual((123.4)..format{radix: 16}, "7b")
        ass.strictEqual((1234567.890123)..format{integerGroupEnabled}, "1,234,568")
        ass.strictEqual((1234567.890123)..format{
            integerGroupEnabled
            integerGroupSeparator: "|"
            integerGroupSize: 4
        }, "123|4568")
        ass.strictEqual((1234567.890123)..format{
            fractionalSize: 9
            integerGroupEnabled
            fractionalGroupEnabled
        }, "1,234,567.890 123 000")
        ass.strictEqual((1234567.890123)..format{
            integerSize: 12
            fractionalSize: 9
            forcesSign
            integerGroupEnabled
            integerGroupSeparator: "|"
            integerGroupSize: 4
            fractionalGroupEnabled
            fractionalGroupSeparator: ","
            fractionalGroupSize: 2
        }, "+0000|0123|4567.89,01,23,00,0")
    )
)

describe("object", --
    it("isObject", --
        ass.strictEqual(Object..isObject{}, true)
        ass.strictEqual(Object..isObject[], true)
        ass.strictEqual(Object..isObject(<>), true)
        ass.strictEqual(Object..isObject(null), false)
        ass.strictEqual(Object..isObject(void), false)
        ass.strictEqual(Object..isObject(3), false)
    )
    it("isNormalObject", --
        ass.strictEqual(Object..isNormalObject{}, true)
        ass.strictEqual(Object..isNormalObject[], false)
        ass.strictEqual(Object..isNormalObject(<>), false)
        ass.strictEqual(Object..isNormalObject(null), false)
        ass.strictEqual(Object..isNormalObject(void), false)
        ass.strictEqual(Object..isNormalObject(3), false)
    )
    it("clone", --
        a: {foo: {bar: 1}, other: 2}
        b: Object..clone(a)
        ass.deepStrictEqual(b, a)
        ass.notStrictEqual(b, a)
        ass.strictEqual(b.foo, a.foo)
    )
    it("keyValues", --
        ass.deepStrictEqual(Object..keyValues{one: 1, other: 2}, [["one", 1], ["other", 2]])
    )
    it("deepAssign", --
        slaveSettings: {
            a: 1
            b: {
                c: 5
                d: 4
            }
            e: 8
        }
        masterSettings: {
            a: 2
            b: {
                c: 6
                g: 3
            }
            f: 0
        }
        Object..deepAssign(slaveSettings, masterSettings)
        ass.deepStrictEqual(slaveSettings, {
            a: 2
            b: {
                c: 6
                d: 4
                g: 3
            }
            e: 8
            f: 0
        })
    )
)
