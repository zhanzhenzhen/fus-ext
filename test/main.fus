fus 1.3.1, radical

import "./manifest" all
ass: import "assert"

describe("loop", --
    it("array: number, diamond function", --
        r: []
        ret: loop[5, <> r.push(1)]
        ass.deepStrictEqual(r, [1, 1, 1, 1, 1])
        ass.strictEqual(ret, void)
    )

    it("array: number, arrow function", --
        r: []
        loop[5, i -> r.push(i)]
        ass.deepStrictEqual(r, [0, 1, 2, 3, 4])
    )

    it("object: by 2 with break", --
        r: []
        loop{1 by 2 for i ->
            r.push i
            if i > 9
                break
        }
        ass.deepStrictEqual(r, [1, 3, 5, 7, 9, 11])
    )

    it("array: number, arrow function with break", --
        r: []
        loop[10, i ->
            r.push(i)
            if i > 5
                break
        ]
        ass.deepStrictEqual(r, [0, 1, 2, 3, 4, 5, 6])
    )

    it("object: canonical", --
        r: []
        loop{from: 1, to: 5, for: i ->
            r.push(i)
        }
        ass.deepStrictEqual(r, [1, 2, 3, 4, 5])
    )

    it("object: normal", --
        r: []
        loop{1 to 5 for i ->
            r.push(i)
        }
        ass.deepStrictEqual(r, [1, 2, 3, 4, 5])
    )

    it("object: by -1", --
        r: []
        loop{5 to 1 by -1 for i ->
            r.push(i)
        }
        ass.deepStrictEqual(r, [5, 4, 3, 2, 1])
    )

    it("function: with break", --
        r: []
        loop i ->
            r.push i
            if i > 3
                break
        ass.deepStrictEqual(r, [0, 1, 2, 3, 4])
    )
)

describe("repeat", --
    it("repeat", --
        ass.deepStrictEqual(repeat[5, i -> i + 2], [2, 3, 4, 5, 6])
        ass.deepStrictEqual(repeat(5, i -> i + 2), [2, 3, 4, 5, 6])
        ass.deepStrictEqual(repeat[5], [0, 1, 2, 3, 4])
        ass.deepStrictEqual(repeat(5), [0, 1, 2, 3, 4])
        ass.deepStrictEqual(repeat{1 to 10 by 2}, [1, 3, 5, 7, 9])
        ass.deepStrictEqual(repeat{1 by 2 for i -> i > 9 ? break else i}, [1, 3, 5, 7, 9])
    )
)

describe("enum", --
    it("enum", --
        ass.deepStrictEqual(enum{a}, {a: 0})
        ass.deepStrictEqual(enum{a, b}, {a: 0, b: 1})
    )
)

describe("compose", --
    it("multiple arguments", --
        a: compose(Math.min, Math.abs)
        ass.strictEqual(a(-2, -3), 3)
    )
    it("array argument", --
        a: compose[Math.min, Math.abs]
        ass.strictEqual(a(-2, -3), 3)
    )
)

describe("spread", --
    it("spread", --
        ass.deepStrictEqual(spread(0, 3), [0, 0, 0])
        ass.deepStrictEqual(spread[0, 3], [0, 0, 0])
    )
)

describe("eventField", --
    it("eventField", --
        r: null
        Obj: class
            new: --
                me.onClick: eventField()
            makeClick: -- me.onClick.fire()
        obj: Obj()
        obj.onClick(--
            r: true
        )
        obj.makeClick()
        ass.strictEqual(r, true)
    )
)

describe("string", --
    it("format", --
        ass.strictEqual("a {0} b {1}"..format("qq", "r"), "a qq b r")
        ass.strictEqual("a {0} b {1}"..format["qq", "r"], "a qq b r")
    )
    it("insert", --
        ass.strictEqual("aaa"..insert(1, "b"), "abaa")
        ass.strictEqual("aaa"..insert[1, "b"], "abaa")
    )
    it("remove", --
        ass.strictEqual("abcde"..remove(1, 2), "ade")
        ass.strictEqual("abcde"..remove[1, 2], "ade")
        ass.strictEqual("abcde"..remove(1), "acde")
        ass.strictEqual("abcde"..remove[1], "acde")
    )
    it("matches", --
        matches: "aaa bbb"..matches(r"a")
        ass(matches is Array)
        ass.strictEqual(matches.length, 3)
        ass(matches.0 is Array)
        ass.strictEqual(matches.0.length, 1)
        ass.strictEqual(matches.0.0, "a")
        ass.strictEqual(matches.0.index, 0)
        ass(matches.1 is Array)
        ass.strictEqual(matches.1.length, 1)
        ass.strictEqual(matches.1.0, "a")
        ass.strictEqual(matches.1.index, 1)
        ass(matches.2 is Array)
        ass.strictEqual(matches.2.length, 1)
        ass.strictEqual(matches.2.0, "a")
        ass.strictEqual(matches.2.index, 2)
    )
    it("capitalize", --
        ass.strictEqual("abc"..capitalize(), "Abc")
    )
    it("deepSplit", --
        ass.deepStrictEqual("a:b,c:d"..deepSplit(",", ":"), [["a", "b"], ["c", "d"]])
        ass.deepStrictEqual("a:b,c:d"..deepSplit[",", ":"], [["a", "b"], ["c", "d"]])
    )
    it("stripTrailingNewline", --
        ass.strictEqual("a\nb\n"..stripTrailingNewline(), "a\nb")
        ass.strictEqual("a\nb"..stripTrailingNewline(), "a\nb")
    )
    it("ensureTrailingNewline", --
        ass.strictEqual("a\nb\n"..ensureTrailingNewline(), "a\nb\n")
        ass.strictEqual("a\nb"..ensureTrailingNewline(), "a\nb\n")
    )
)

describe("array", --
    it("portion", --
        ass.deepStrictEqual([1, 2, 3, 4, 5, 6]..portion(2, 3), [3, 4, 5])
        ass.deepStrictEqual([1, 2, 3, 4, 5, 6]..portion[2, 3], [3, 4, 5])
        ass.deepStrictEqual([1, 2, 3, 4, 5, 6]..portion(2, void, 3), [3, 4])
        ass.deepStrictEqual([1, 2, 3, 4, 5, 6]..portion[2, void, 3], [3, 4])
        ass.deepStrictEqual([1, 2, 3, 4, 5, 6]..portion(2), [3, 4, 5, 6])
        ass.deepStrictEqual([1, 2, 3, 4, 5, 6]..portion[2], [3, 4, 5, 6])
    )
    it("toObject", --
        ass.deepStrictEqual([["a", 1], ["b", 2]]..toObject(), {a: 1, b: 2})
    )
)
