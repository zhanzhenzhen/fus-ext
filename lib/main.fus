fus 1.3.1, radical

internalLoop: (data, enablesReturns) ->
    theBreak: break # compatibility for embedded JS (`break` is a JS keyword)
    results: enablesReturns ? [] | void

    if data is Number
        js"
            (() => {
                for (let i = 0; i < data; i++) {
                    if (enablesReturns) results.push(i);
                }
                return results;
            })()
        "
    else if data is Function
        js"
            (() => {
                let i = 0;
                while (true) {
                    let r = data(i);
                    if (r === theBreak) break;
                    if (enablesReturns) results.push(r);
                    i++;
                }
                return results;
            })()
        "
    else if data is Array
        js"
            (() => {
                for (let i = 0; i < data[0]; i++) {
                    let r = data[1] === undefined ? i : data[1](i);
                    if (r === theBreak) break;
                    if (enablesReturns) results.push(r);
                }
                return results;
            })()
        "
    else if data is Object
        step: data.by ifvoid 1
        startIndex: data.from ifvoid data.""
        endIndex: data.to ifvoid Infinity
        js"
            (() => {
                for (let i = startIndex; step >= 0 ? i <= endIndex : i >= endIndex; i += step) {
                    let r = data.for === undefined ? i : data.for(i);
                    if (r === theBreak) break;
                    if (enablesReturns) results.push(r);
                }
                return results;
            })()
        "
    else
        throw Error("`repeat` syntax error.")

repeat'export: (a, b) -> internalLoop(b = void ? a | [a, b], true)
loop'export: (a, b) -> internalLoop(b = void ? a | [a, b], false)

break'export: Symbol()

enum'export: <>
    k: 0
    r: {}
    Object.keys(@).forEach <>
        r.(@): k
        k: k + 1
    r

fail'export: errorMessage -> throw Error(errorMessage)

compose'export: (functions...) ->
    functions: functions.0 if functions.0 is Array
    (args...) ->
        this: me
        functions.forEach(m ->
            args: [m.apply(this, args)]
        )
        args.0

assert'export: (condition, message) ->
    if not condition then fail(message)

spread'export: (value, count) ->
    repeat(count, -- value)

# This function `f` is weird and hard to understand, but we must use this mechanism
# (function+object hybrid) to support cascade (chaining).
# For chaining, I mean not `obj.onAbc.bind(a).unbind(a)`, but `obj.onAbc(a).onDef(b).doSth()`.
eventField'export: --
    f: (method, arg) ->
        if method is Function
            arg: method
            method: "bind"
        assert(method is String)
        f.(method)(arg)
        me
    f._listeners: []
    f.getListeners: --
        f._listeners.clone()
    f.bind: listener ->
        f._listeners.push(listener) if listener not in f._listeners
        f
    f.unbind: listener ->
        f._listeners.removeAll(listener)
        f
    f.unbindAll: --
        f._listeners: []
        f
    f.fire: arg ->
        f._listeners.every(listener ->
            if arg'ok.blocksListeners
                false
            else
                listener(arg)
                true
        )
        f
    f

sys: import "./sys" all
export sys

web: import "./web" all
export web

feNumber: import "./number" all
export feNumber

feNumberStatic: import "./number-static" all
export feNumberStatic

feString: import "./string" all
export feString

feArray: import "./array" all
export feArray

feMath: import "./math" all
export feMath

feJson: import "./json" all
export feJson

feDate: import "./date" all
export feDate

feConsole: import "./console" all
export feConsole

..'export: x ->
    if x = Number
        feNumberStatic
    else if x = Math
        feMath
    else if x = JSON
        feJson
    else if x = console
        feConsole
    else if x is Number
        feNumber
    else if x is String
        feString
    else if x is Array
        feArray
    else if x is Date
        feDate
