fus 2.4.1, radical

internalLoop: (data, enablesReturns) ->
    theBreak: break # compatibility for embedded JS (`break` is a JS keyword)
    results: enablesReturns ? [] | void

    if data is Number
        js"
            (() => {
                for (let i = 0; i < data; i++) {
                    if (enablesReturns) results.push(i);
                }
                return results;
            })()
        "
    else if data is Function
        js"
            (() => {
                let i = 0;
                while (true) {
                    let r = data(i);
                    if (r === theBreak) break;
                    if (enablesReturns) results.push(r);
                    i++;
                }
                return results;
            })()
        "
    else if data is Array
        js"
            (() => {
                for (let i = 0; i < data[0]; i++) {
                    let r = data[1] === undefined ? i : data[1](i);
                    if (r === theBreak) break;
                    if (enablesReturns) results.push(r);
                }
                return results;
            })()
        "
    else if data is Object
        step: data.by ifvoid 1
        startIndex: data.from ifvoid data.""
        endIndex: data.to ifvoid Infinity
        js"
            (() => {
                for (let i = startIndex; step >= 0 ? i <= endIndex : i >= endIndex; i += step) {
                    let r = data.for === undefined ? i : data.for(i);
                    if (r === theBreak) break;
                    if (enablesReturns) results.push(r);
                }
                return results;
            })()
        "
    else
        throw Error("`repeat` syntax error.")

repeat'export: (a, b) -> internalLoop(b = void ? a | [a, b], true)
loop'export: (a, b) -> internalLoop(b = void ? a | [a, b], false)

break'export: Symbol()

enum'export: <>
    k: 0
    r: {}
    Object.keys(@).forEach <>
        r.(@): k
        k: k + 1
    r

fail'export: errorMessage -> throw Error(errorMessage)

compose'export: (functions...) ->
    functions: functions.0 if functions.0 is Array
    (args...) ->
        this: me
        functions.forEach(m ->
            args: [m.apply(this, args)]
        )
        args.0

assert'export: (condition, message) ->
    if not condition then fail(message)

spread'export: (value, count) ->
    repeat(count, -- value)

# This function `f` is weird and hard to understand, but we must use this mechanism
# (function+object hybrid) to support cascade (chaining).
# For chaining, I mean not `obj.onAbc.bind(a).unbind(a)`, but `obj.onAbc(a).onDef(b).doSth()`.
eventField'export: --
    f: (method, arg) ->
        if method is Function
            arg: method
            method: "bind"
        assert(method is String)
        f._holder ifnull: me
        f.(method)(arg)
        me
    f._holder: null
    f._listeners: []
    f.getListeners: --
        f._listeners..clone()
    f.bind: listener ->
        f._listeners.push(listener) if listener not in f._listeners
        f
    f.unbind: listener ->
        f._listeners..removeAll(listener)
        f
    f.unbindAll: --
        f._listeners: []
        f
    f.fire: arg ->
        f._listeners.every(listener ->
            if arg'ok and arg.blocksListeners
                false
            else
                listener(arg, f._holder)
                true
        )
        f

    # This function isn't "chainable" because it must return a promise.
    f.asyncFire: arg ->
        f._listeners..asyncForEach(listener ->
            if arg'ok and arg.blocksListeners
                break
            else
                listener(arg, f._holder)
        )

    f

setImmediate'export: (callback, args) -> setTimeout(callback, 0, args)
clearImmediate'export: clearTimeout

# Timers ========================================[
# Why default precision is 30ms? Because in most cases we don't want it to bring more CPU usage.
# In my test if it's 1ms then CPU usage will be around 5%. If 30ms then 0.4%.
# These two numbers are in single-core, so it's 1.25% and 0.1% in all my 4 cores.

# Why use one "global" `setInterval` to do checking? Because in my test, multiple `setInterval`
# or `setTimeout` are expensive. Here's the test result (both using 1ms interval):
# Single `setInterval`, callback has a 100000-cycle loop: 16% CPU usage
# 100 `setInterval`, callback is very simple: 13% CPU usage
# So, single `setInterval` is better. The real production will not reach 100000 cycles.

Timer'export: class
    static _endOfTime: new Date("9999-12-30T00:00:00Z")
    static _precision: 30

    static _enable: <>
        Me._internalTimer ifnull: setInterval(--
            Me._onCheck.fire()
        , Me._precision)
    static _disable: <>
        if Me._internalTimer'ok
            clearInterval(Me._internalTimer)
        Me._internalTimer: null

    static setPrecision: precision ->
        if Me._internalTimer'ok
            Me._disable()
            Me._precision: precision
            Me._enable()
        else
            Me._precision: precision
        void
    static getPrecision: <>
        Me._precision

    static getEndOfTime: <>
        Me._endOfTime

    static _onCheck: eventField()

    new: options ->
        o: Object..absorb(Object..clone(options ifvoid {}), {
            targetTime: Me._endOfTime
            allowsEqual: true
        })
        me.targetTime: o.targetTime
        me.allowsEqual: o.allowsEqual
        me._counter: 0
        me._running: false
        me.onArrive: eventField()
        me.run()

    run: <>
        if not me._running
            me._running: true
            Me._enable()
            me._checker: <>
                nowTime: Date()
                if (me.allowsEqual ? nowTime ≥ me.targetTime | nowTime > me.targetTime)
                    me._counter: self + 1
                    lastTargetTime: me.targetTime
                    me.targetTime: Me._endOfTime
                    me.onArrive.fire{
                        idealTime: lastTargetTime
                        nowTime: nowTime
                        index: me._counter - 1
                    }
            Me._onCheck.bind(me._checker)
        me
    stop: <>
        if me._running
            me._running: false
            Me._onCheck.unbind(me._checker)
            if Me._onCheck.getListeners()..isEmpty()
                Me._disable()
        me
    getRunning: <> me._running
    resetCounter: <>
        me._counter: 0
        me
    getCounter: <> me._counter

IntervalTimer'export: class from Timer
    new: options ->
        super(options)
        nowTime: Date()
        o: Object..absorb(Object..clone(options ifvoid {}), {
            interval: 1000
            startTime: nowTime
            endTime: Me.getEndOfTime()..subtract(1000)
            includesStart: true
            includesEnd: false
            skipsPast: false
        })
        me.interval: o.interval
        me.startTime: o.startTime
        me.endTime: o.endTime
        me.includesStart: o.includesStart
        me.includesEnd: o.includesEnd
        me.skipsPast: o.skipsPast
        me.targetTime: me.startTime
        me._started: false
        me.onStart: eventField()
        me.onArrive.bind(e ->
            if me.interval < Me.getPrecision() * 2
                me.stop()
            else
                me.targetTime:
                    if me.skipsPast
                        Date(e.nowTime - (e.nowTime - e.idealTime) mod me.interval + me.interval)
                    else
                        e.idealTime..add(me.interval)
                if not me._started
                    me._started: true
                    if not me.includesStart
                        me.resetCounter()
                        e.blocksListeners: true
                    me.onStart.fire()
                if (
                    if me.includesEnd
                        me.targetTime > me.endTime
                    else
                        me.targetTime ≥ me.endTime
                )
                    me.stop()
        )

Observer'export: class from IntervalTimer
    static _error: Error()
    new: (args...) ->
        [options, fn]: args.0 is Function ? [args.1, args.0] | [args.0, args.1]
        clonedOptions: options'ok ? Object..clone(options) | {}
        clonedOptions.interval ifnull: 100
        clonedOptions.skipsPast ifnull: true
        super(clonedOptions)
        me._fun: fn
        me.onChange: eventField()
        me.onUpdate: eventField()
        me.onArrive.bind(<>
            me.check()
        )
    check: (forcesUpdate: false) ->
        newValue:
            try
                me._fun()
            catch
                Me._error
        if newValue = void
            newValue: Me._error

        # Must use `Object.is`, otherwise if NaN then the events will be fired endlessly.
        if forcesUpdate or me._oldValue = void or not Object.is(newValue, me._oldValue)
            me.onUpdate.fire{value: newValue}
            if me._oldValue ≠ void
                me.onChange.fire{
                    oldValue: me._oldValue
                    newValue: newValue
                }
            me._oldValue: newValue

# ]========================================

# This class is a combination of 3 things: complex number, 2d point, and 2d vector.
# It can even be used for all "ordered pair" things such as size (width and height).
Point'export: class
    new: (x, y) ->
        me.x: x
        me.y: y

    static from: (value, second) ->
        if value is Number
            if second is Number
                Point(value, second)
            else
                Point(value, 0)
        else if value is Point
            value.clone()
        else if value is String
            Point.fromString(value)
        else if value is Array
            Point.fromArray(value)
        else
            fail()

    static fromArray: array -> Point(array.0, array.1)

    static fromString: s ->
        adjustedString: s.replace(r"[ ()] "g, "")
        normalMatch: adjustedString.match(r"^([^,]*),(.*)$")
        if normalMatch'ok
            Point(
                Number..parseFloat(normalMatch.1)
                Number..parseFloat(normalMatch.2)
            )
        else
            complexMatch: adjustedString.match(r"
                ^
                    (
                        [+-]?
                        [0-9]*
                        \.?
                        [0-9]*
                        (?:
                            [Ee]
                            [+-]?
                            [0-9]+
                        )?
                        (?! [i0-9Ee.] )
                    )?
                    (?:
                        (
                            [+-]?
                            [0-9]*
                            \.?
                            [0-9]*
                            (?:
                                [Ee]
                                [+-]?
                                [0-9]+
                            )?
                        )
                        i
                    )?
                $
            ")
            if complexMatch'ok
                real: complexMatch.1 ifnull "0"
                imaginary: complexMatch.2 ifnull "0"
                if real = "" then real: "1"
                if imaginary = "" then imaginary: "1"
                if real = "+" then real: "1"
                if imaginary = "+" then imaginary: "1"
                if real = "-" then real: "-1"
                if imaginary = "-" then imaginary: "-1"
                Point(
                    parseFloat(real)
                    parseFloat(imaginary)
                )
            else
                fail()

    static fromPolar: (r, angle) -> Point(r * Math.cos(angle), r * Math.sin(angle))

    static fromPolarInDegrees: (r, angle) -> match Math..principalDegrees(angle)
        # avoid approximation
        0   ? Point(r, 0)
        90  ? Point(0, r)
        -90 ? Point(0, -r)
        180 ? Point(-r, 0)

        |     Point.fromPolar(r, Math..degreesToRadians(angle))

    real: <> me.x
    imaginary: <> me.y

    toString: <> "(\(me.x),\(me.y))"
    toComplexString: <>
        sign: me.y ≥ 0 ? "+" | "-"
        "\(me.x)\(sign)\(Math.abs(me.y))i"
    toArray: <> [me.x, me.y]
    toJSON: <> {x: me.x, y: me.y}

    clone: <> Point(me.x, me.y)

    equals: p -> cmath.equals(me, p)
    approxEquals: p -> cmath.approxEquals(me, p)
    opposite: <> cmath.opposite(me)
    reciprocal: <> cmath.reciprocal(me)
    conjugate: <> cmath.conjugate(me)
    abs: <> cmath.abs(me)
    add: p -> cmath.add(me, p)
    subtract: p -> cmath.subtract(me, p)
    multiply: p -> cmath.multiply(me, p)
    divide: p -> cmath.divide(me, p)
    distance: p -> cmath.distance(me, p)

    dotProduct: p ->
        p: Point.from(p)
        me.x * p.x + me.y * p.y

    # There's no need to return the direction, because the direction is certain
    # and not in x-y plane.
    crossProduct: p ->
        p: Point.from(p)
        me.x * p.y - me.y * p.x

    isOppositeTo: p -> me.opposite().equals(p)

    phase: <> cmath.phase(me)
    phaseTo: p ->
        p: Point.from(p)
        Math..principalRadians(p.phase() - me.phase())
    phaseInDegrees: <> cmath.phaseInDegrees(me)
    phaseInDegreesTo: p ->
        p: Point.from(p)
        Math..principalDegrees(p.phaseInDegrees() - me.phaseInDegrees())

    scale: (value, second) ->
        size:
            if value is Number
                if second is Number
                    Point(value, second)
                else
                    Point(value, value)
            else
                Point.from(value)
        Point(me.x * size.x, me.y * size.y)

    rotate: angle -> me.multiply(Point.fromPolar(1, angle))
    rotateDegrees: angle -> me.multiply(Point.fromPolarInDegrees(1, angle))

AsyncQueue'export: class
    # TODO: We may want to add some options such as whether the first task
    # should start synchronously.
    new: <>
        me._length: 0
        me._promise: Promise.resolve()

    # `arg` can be a callback or an array of callbacks.
    add: arg ->
        list: arg is Array ? arg | [arg]
        list.forEach callback ->
            me._length: self + 1
            me._promise: me._promise.then(<>
                callback()'wait
                me._length: self - 1
            )

    length'get: <> me._length

sys: import "./sys" all
export sys

web: import "./web" all
export web

cmath: import "./cmath" all
export cmath

feNumber: import "./number" all
export feNumber

feNumberStatic: import "./number-static" all
export feNumberStatic

feString: import "./string" all
export feString

feObject: import "./object" all
export feObject

feArray: import "./array" all
export feArray

feMath: import "./math" all
export feMath

feJson: import "./json" all
export feJson

feDate: import "./date" all
export feDate

feConsole: import "./console" all
export feConsole

feUint8Array: import "./uint8-array" all
export feUint8Array

feUint8ArrayStatic: import "./uint8-array-static" all
export feUint8ArrayStatic

fePromiseStatic: import "./promise-static" all
export fePromiseStatic

..'export: x ->
    if x = Number
        feNumberStatic
    else if x = Object
        feObject
    else if x = Math
        feMath
    else if x = JSON
        feJson
    else if x = console
        feConsole
    else if x = Uint8Array
        feUint8ArrayStatic
    else if x = Promise
        fePromiseStatic
    else if x is Number
        feNumber
    else if x is String
        feString
    else if x is Array
        feArray
    else if x is Date
        feDate
    else if x is Uint8Array
        feUint8Array
