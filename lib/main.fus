fus 0.1.0, radical

repeat'export: <>
    theBreak: break # compatibility for embedded JS (`break` is a JS keyword)
    arg: @

    if @ is Function
        js"
            (() => {
                let i = 0;
                while (true) {
                    if (arg(i) === theBreak) break;
                    i++;
                }
            })()
        "
    else if @ is Array
        js"
            (() => {
                for (let i = 0; i < arg[0]; i++) {
                    if (arg[1](i) === theBreak) break;
                }
            })()
        "
    else if @ is Object
        step: @by ifvoid 1
        startIndex: @from ifvoid @.""
        endIndex: @to ifvoid Infinity
        js"
            (() => {
                for (let i = startIndex; step >= 0 ? i <= endIndex : i >= endIndex; i += step) {
                    if (arg.for(i) === theBreak) break;
                }
            })()
        "
    else
        throw Error("`repeat` syntax error.")

    void

break'export: Symbol()

enum'export: <>
    k: 0
    r: {}
    Object.keys(@).forEach <>
        r.(@): k
        k: k + 1
    r

fail'export: errorMessage -> throw Error(errorMessage)

sys: import "./sys" all
export sys

web: import "./web" all
export web

es: import "./string" all
export es

ea: import "./array" all
export ea
