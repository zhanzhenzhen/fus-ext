fus 1.3.1
import "./main" all

# If the element is a number or string, it will be more convenient
# to use the element itself without a selector.
_elementOrUseSelector: (element, selector) -> if selector'ok then selector(element) else element

_ratioToIndex'export: (arr, ratio) ->
    r: Math.round(ratio * arr.length - 0.5)
    if r ≤ 0 # `≤` can correct -0
        0
    else if r > arr.length - 1
        arr.length - 1
    else
        r

_ratioToLength'export: (arr, ratio) ->
    r: Math.round(ratio * (arr.length + 1) - 0.5)
    if r ≤ 0 # `≤` can correct -0
        0
    else if r > arr.length
        arr.length
    else
        r

_reverseToIndex'export: (arr, reverseIndex) ->
    arr.length - 1 - reverseIndex

_positionToIndex'export: (arr, pos) ->
    if pos is Number
        if 0 < pos < 1
            pos: {Ratio: pos}
        else if -1 < pos < 0
            pos: {Reverse: {Ratio: -pos}}
        else if pos < 0
            pos: {Reverse: -pos - 1}
    if pos is Number
        pos
    else if pos'ok.Reverse'ok.Ratio'ok
        arr.._reverseToIndex(arr.._ratioToIndex(pos.Reverse.Ratio))
    else if pos'ok.Reverse'ok
        arr.._reverseToIndex(pos.Reverse)
    else if pos'ok.Ratio'ok
        arr.._ratioToIndex(pos.Ratio)
    else
        fail()

_amountToLength'export: (arr, amount) ->
    if amount is Number
        if 0 < amount < 1
            amount: {Ratio: amount}
    if amount is Number
        amount
    else if amount'ok.Ratio'ok
        arr.._ratioToLength(amount.Ratio)
    else
        fail()

clone'export: arr -> arr.slice()

isEmpty'export: arr -> arr.length = 0

portion'export: (arr, startIndex, length, endIndex) ->
    startIndex: arr.._positionToIndex(startIndex)
    length: arr.._amountToLength(length) if length'ok
    endIndex: arr.._positionToIndex(endIndex) if endIndex'ok
    arr.slice(startIndex, length'ok ? startIndex + length | (endIndex'ok ? endIndex + 1 | void))

toObject'export: arr ->
    r: {}
    arr.forEach(element ->
        r.(element.0): element.1
    )
    r
